import {ЛинейнаяЕдиница, ЛинейнаяВеличина, КвадратнаяВеличина }  from "./units"

class Точка {
  private x: number
  private y: number

  constructor(x: number, y: number) {
    if (x >= 0 && y >= 0) {
      this.x = x
      this.y = y
    } else {
      throw new Error('Без отрицательных чисел плес')
    }
  }
}

abstract class Фигура {
  public center: Точка
  protected _основнаяЕдиница: ЛинейнаяЕдиница;

  get основнаяЕдиница(): ЛинейнаяЕдиница {
    return this._основнаяЕдиница;
  }
  
  constructor(center: Точка, основнаяЕдиница: ЛинейнаяЕдиница) {
    this.center = center   
    this._основнаяЕдиница = основнаяЕдиница
  }  

  abstract конвертироватьВЕдиницы(линейнаяЕдиница: ЛинейнаяЕдиница): Фигура 
  abstract площадь(): КвадратнаяВеличина
  abstract периметр(): ЛинейнаяВеличина 

  // заглушка потому что написать abstract static в TS и JS нельзя
  protected static проверитьСуществование(...args: any[]): void {
    throw new Error(`Метод проверитьСуществование должен быть реализован в ${this.name}`);
  }

  protected static убедитьсяВПоложительныхРазмерах(...величины: number[]): void {
    for (const val of величины) {
      if (val <= 0) throw new Error(`Все размеры фигуры должны быть строго положительными (получено ${val})`);
    }
  }

  protected static проверитьИлиВлазитВСцену(...размеры: ЛинейнаяВеличина[]): void {
    // все размеры в метры
    размеры = размеры.map(item=>item.м)
    for (const размер of размеры) {
      // фигуры не более 100м 
      if (размер.val > 100) throw new Error(`${размер.val} размер не влазит на сцену`);
    }
  }

}

class Прямоугольник extends Фигура {
  public width: ЛинейнаяВеличина // ширина в метрах
  public height: ЛинейнаяВеличина // высота в метрах

   // Конструктор для чисел и единиц измерения
   constructor(width: number, height: number, unit?: ЛинейнаяЕдиница);
   // Конструктор для готовых линейных величин
   constructor(width: ЛинейнаяВеличина, height: ЛинейнаяВеличина);
   // Реализация конструктора
   constructor(
    wid: number | ЛинейнаяВеличина,
    hei: number | ЛинейнаяВеличина,
     unit: ЛинейнаяЕдиница = "м"
   ) {
     // Подготовка величин если на конструктор переданы number-ы
     const [width, height] = ЛинейнаяВеличина.привестиКВеличинам([wid, hei], unit);

     // Проверка единиц и выбор основной
     const основнаяЕдиница = ЛинейнаяВеличина.проверитьОднотипностьЕдиниц(width, height);  

     // Установка центра фигуры и основнойЕдиницы на суперконструкторе
     super(new Точка(0, 0), основнаяЕдиница);
     
     // Проверка существования
     Прямоугольник.проверитьСуществование(width, height)

     // Присваиваем свойства        
     this.width  = width
     this.height = height    
   }

  public static проверитьСуществование(width: ЛинейнаяВеличина, height: ЛинейнаяВеличина): void {
    Фигура.убедитьсяВПоложительныхРазмерах(width.val, height.val)
    Фигура.проверитьИлиВлазитВСцену(width, height)     
  }
   
  конвертироватьВЕдиницы(unit: ЛинейнаяЕдиница): Прямоугольник {
    const width = this.width.вЕдиницах(unit);
    const height = this.height.вЕдиницах(unit);    
    return new Прямоугольник(width, height);
  }
  площадь(): КвадратнаяВеличина {
    return new КвадратнаяВеличина(this.width.val * this.height.val,"м²")
  }

  периметр(): ЛинейнаяВеличина {
    return new ЛинейнаяВеличина(this.height.val * 2 + this.width.val * 2,"м")
  }
}

class Треугольник extends Фигура {
  public стороны: [ЛинейнаяВеличина, ЛинейнаяВеличина, ЛинейнаяВеличина];

 // Конструктор для чисел и единиц измерения
 constructor(сторона1: number, сторона2: number, сторона3: number, unit?: ЛинейнаяЕдиница);
 // Конструктор ЛинейнаяВеличина
 constructor(сторона1: ЛинейнаяВеличина, сторона2: ЛинейнаяВеличина, сторона3: ЛинейнаяВеличина);
 // Реальная реализация
 constructor(
  сторона1: number | ЛинейнаяВеличина,
  сторона2: number | ЛинейнаяВеличина,
  сторона3: number | ЛинейнаяВеличина,
  unit: ЛинейнаяЕдиница = "м"
) {
  // Подготовка величин если на конструктор переданы number-ы
  const [s1, s2, s3] = ЛинейнаяВеличина.привестиКВеличинам([сторона1, сторона2, сторона3], unit);

  // Проверка единиц и выбор основной
  const основнаяЕдиница = ЛинейнаяВеличина.проверитьОднотипностьЕдиниц(s1, s2, s3);

  // Установка центра фигуры и основнойЕдиницы на суперконструкторе
  super(new Точка(0, 0), основнаяЕдиница); 
 
  // Проверка существования
  Треугольник.проверитьСуществование(s1, s2, s3);
  
  // Присваиваем свойства
  this.стороны = [s1, s2, s3];
}

public static проверитьСуществование(a: ЛинейнаяВеличина, b: ЛинейнаяВеличина, c: ЛинейнаяВеличина): void {
  Фигура.проверитьИлиВлазитВСцену(a, b, c)
  Фигура.убедитьсяВПоложительныхРазмерах(a.val, b.val, c.val) 
  if (a.val + b.val <= c.val || a.val + c.val <= b.val || b.val + c.val <= a.val) {
    throw new Error("Такой треугольник не существует");
  }
}

// Остальные методы без изменений
конвертироватьВЕдиницы(unit: ЛинейнаяЕдиница): Треугольник {
  return new Треугольник(
    this.стороны[0].вЕдиницах(unit),
    this.стороны[1].вЕдиницах(unit),
    this.стороны[2].вЕдиницах(unit), 
  );
}

  // amazonq-ignore-next-line
  площадь(): КвадратнаяВеличина {
    const p = this.периметр().val / 2;
    const площадь = Math.sqrt(
      p *
      (p - this.стороны[0].м.val) *
      (p - this.стороны[1].м.val) *
      (p - this.стороны[2].м.val)
    );
    return new КвадратнаяВеличина(площадь, "м²");
  }

  периметр(): ЛинейнаяВеличина {
    return new ЛинейнаяВеличина(
      this.стороны[0].м.val + this.стороны[1].м.val + this.стороны[2].м.val,
      "м"
    );
  }
}

class Круг extends Фигура {
  public radius: ЛинейнаяВеличина;

  // Конструктор для числа и единицы измерения
  constructor(radius: number, unit?: ЛинейнаяЕдиница);
  // Конструктор для готовой линейной величины
  constructor(radius: ЛинейнаяВеличина);
  // Реализация конструктора
  constructor(
    radius: number | ЛинейнаяВеличина,
    unit: ЛинейнаяЕдиница = "м"
  ) {

    // Подготовка величин если на конструктор переданы number-ы
    const [r] = ЛинейнаяВеличина.привестиКВеличинам([radius], unit);

    // Проверка единиц и выбор основной
    const основнаяЕдиница = ЛинейнаяВеличина.проверитьОднотипностьЕдиниц(r);

    // Установка центра фигуры и основнойЕдиницы на суперконструкторе
    super(new Точка(0, 0), основнаяЕдиница); 

    // Проверка существования
    Круг.проверитьСуществование(r);

    // Присваиваем свойства
    this.radius = r;
  }

  public static проверитьСуществование(radius: ЛинейнаяВеличина): void {
    Фигура.проверитьИлиВлазитВСцену(radius)
    Фигура.убедитьсяВПоложительныхРазмерах(radius.val) 
  }

  конвертироватьВЕдиницы(unit: ЛинейнаяЕдиница): Круг {
    return new Круг(this.radius.вЕдиницах(unit));
  }

  площадь(): КвадратнаяВеличина {
    return new КвадратнаяВеличина(
      Math.PI * this.radius.м.val * this.radius.м.val,
      "м²"
    );
  }

  периметр(): ЛинейнаяВеличина {
    return new ЛинейнаяВеличина(2 * Math.PI * this.radius.м.val, "м");
  }
}

class Элипс extends Фигура {
  public majorAxis: ЛинейнаяВеличина; // большая полуось
  public minorAxis: ЛинейнаяВеличина; // малая полуось

  // Конструктор для чисел и единиц измерения
  constructor(majorAxis: number, minorAxis: number, unit?: ЛинейнаяЕдиница);
  // Конструктор для готовых линейных величин
  constructor(majorAxis: ЛинейнаяВеличина, minorAxis: ЛинейнаяВеличина);
  // Реализация конструктора
  constructor(
    major: number | ЛинейнаяВеличина,
    minor: number | ЛинейнаяВеличина,
    unit: ЛинейнаяЕдиница = "м"
  ) {
    // Подготовка величин если на конструктор переданы number-ы
    const [majorAxis, minorAxis] = ЛинейнаяВеличина.привестиКВеличинам([major, minor], unit);

    // Проверка единиц и выбор основной
    const основнаяЕдиница = ЛинейнаяВеличина.проверитьОднотипностьЕдиниц(majorAxis, minorAxis);

    // Установка центра фигуры и основнойЕдиницы на суперконструкторе
    super(new Точка(0, 0), основнаяЕдиница);

    // Проверка существования
    Элипс.проверитьСуществование(majorAxis, minorAxis);

    // Присваиваем свойства
    this.majorAxis = majorAxis;
    this.minorAxis = minorAxis;
  }

  public static проверитьСуществование(majorAxis: ЛинейнаяВеличина, minorAxis: ЛинейнаяВеличина): void {
    Фигура.проверитьИлиВлазитВСцену(majorAxis, minorAxis)
    Фигура.убедитьсяВПоложительныхРазмерах(majorAxis.val, minorAxis.val)
    if (majorAxis.val < minorAxis.val) {
      throw new Error("Большая полуось должна быть больше малой");
    }
  }

  конвертироватьВЕдиницы(unit: ЛинейнаяЕдиница): Элипс {
    return new Элипс(
      this.majorAxis.вЕдиницах(unit),
      this.minorAxis.вЕдиницах(unit)
    );
  }

  площадь(): КвадратнаяВеличина {
    return new КвадратнаяВеличина(
      Math.PI * this.majorAxis.м.val * this.minorAxis.м.val,
      "м²"
    );
  }

  периметр(): ЛинейнаяВеличина {
    // Приближенная формула Рамануджана
    const a = this.majorAxis.м.val;
    const b = this.minorAxis.м.val;
    const h = Math.pow((a - b)/(a + b), 2);
    const периметр = Math.PI * (a + b) * (1 + (3*h)/(10 + Math.sqrt(4 - 3*h)));
    return new ЛинейнаяВеличина(периметр, "м");
  }
}

class Ромб extends Фигура {
  public side: ЛинейнаяВеличина; // сторона
  public height: ЛинейнаяВеличина; // высота

  // Конструктор для чисел и единиц измерения
  constructor(side: number, height: number, unit?: ЛинейнаяЕдиница);
  // Конструктор для готовых линейных величин  
  constructor(side: ЛинейнаяВеличина, height: ЛинейнаяВеличина);
  // Реализация конструктора
  constructor(
    sid: number | ЛинейнаяВеличина,
    hei: number | ЛинейнаяВеличина,
    unit: ЛинейнаяЕдиница = "м"
  ) {
    // Подготовка величин если на конструктор переданы number-ы
    const [side, height] = ЛинейнаяВеличина.привестиКВеличинам([sid, hei], unit);

    // Проверка единиц и выбор основной
    const основнаяЕдиница = ЛинейнаяВеличина.проверитьОднотипностьЕдиниц(side, height);

    // Установка центра фигуры и основнойЕдиницы на суперконструкторе
    super(new Точка(0, 0), основнаяЕдиница);

    // Проверка существования
    Ромб.проверитьСуществование(side, height);

    // Присваиваем свойства
    this.side = side;
    this.height = height;
  }

  public static проверитьСуществование(side: ЛинейнаяВеличина, height: ЛинейнаяВеличина): void {
    Фигура.проверитьИлиВлазитВСцену(side, height)
    Фигура.убедитьсяВПоложительныхРазмерах(side.val, height.val)
    if (height.val >= side.val * 2) {
      throw new Error("Высота ромба не может быть больше или равна удвоенной стороне");
    }
  }

  конвертироватьВЕдиницы(unit: ЛинейнаяЕдиница): Ромб {
    return new Ромб(
      this.side.вЕдиницах(unit),
      this.height.вЕдиницах(unit)
    );
  }

  площадь(): КвадратнаяВеличина {
    return new КвадратнаяВеличина(
      this.side.м.val * this.height.м.val,
      "м²"
    );
  }

  периметр(): ЛинейнаяВеличина {
    return new ЛинейнаяВеличина(4 * this.side.м.val, "м");
  }
}


export {
  Точка,
  Фигура,
  Круг,
  Прямоугольник,
  Треугольник,
  Элипс,
  Ромб
}

//abstract конвертироватьВЕдиницы(линейнаяЕдиница: ЛинейнаяЕдиница): Фигура;
// конвертироватьВЕдиницы(линейнаяЕдиница: ЛинейнаяЕдиница): Круг {
//   const radius = this.radius.вЕдиницах(линейнаяЕдиница);
  
//   return new Круг(radius.val);
// }
// единица: ЛинейнаяЕдиница = 'м'
