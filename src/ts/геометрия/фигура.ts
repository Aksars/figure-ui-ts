import { ЛинейнаяЕдиница, ЛинейнаяВеличина, КвадратнаяВеличина } from "../утилиты/единицыИзмерения"
import { Точка } from "./абстрактное/точка"

export abstract class Фигура {
  // Макс размер фигур 100м, чтоб влазили на сайт
  protected static readonly МАКС_РАЗМЕР = new ЛинейнаяВеличина(100, 'м');

  public center: Точка
  protected _основнаяЕдиница: ЛинейнаяЕдиница;

  get основнаяЕдиница(): ЛинейнаяЕдиница {
    return this._основнаяЕдиница;
  }

  constructor(center: Точка, основнаяЕдиница: ЛинейнаяЕдиница) {
    this.center = center
    this._основнаяЕдиница = основнаяЕдиница
  }

  abstract конвертироватьВЕдиницы(линейнаяЕдиница: ЛинейнаяЕдиница): Фигура
  abstract площадь(): КвадратнаяВеличина
  abstract периметр(): ЛинейнаяВеличина
  
  protected static убедитьсяВПоложительныхРазмерах(...величины: number[]): void {
    for (const val of величины) {
      if (val <= 0) throw new Error(`Все размеры фигуры должны быть строго положительными (получено ${val})`);
    }
  }
 
  protected static фигураНеСлишкомБольшая(...размеры: ЛинейнаяВеличина[]): void {
    // все размеры в метры
    размеры = размеры.map(item=>item.м)
    for (const размер of размеры) {
      // объекты не более МАКС_РАЗМЕР 
      if (размер.val > this.МАКС_РАЗМЕР.val) throw new Error(`${размер.val} фигуры не более ${this.МАКС_РАЗМЕР.строкой}`);
    }
  }

  protected static проверитьСпецифичныеУсловия(...величины: ЛинейнаяВеличина[]): void {
    // Пусто для фигур без особых правил
  }
  
  // Общая логика для валидации фигур вот такая
  protected static проверитьСуществование(...величины: ЛинейнаяВеличина[]): void {
    this.убедитьсяВПоложительныхРазмерах(...величины.map(v => v.val));  
    this.фигураНеСлишкомБольшая(...величины);
    this.проверитьСпецифичныеУсловия(...величины);
  }

}








