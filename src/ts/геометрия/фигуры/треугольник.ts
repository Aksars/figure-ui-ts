import { Фигура } from "../фигура"
import {Точка} from "../абстрактное/точка"
import {ЛинейнаяВеличина, ЛинейнаяЕдиница, КвадратнаяВеличина} from "../../утилиты/единицыИзмерения"

export class Треугольник extends Фигура {
    public стороны: [ЛинейнаяВеличина, ЛинейнаяВеличина, ЛинейнаяВеличина];
  
    // Конструктор для чисел и единиц измерения
    constructor(сторона1: number, сторона2: number, сторона3: number, unit?: ЛинейнаяЕдиница);
    // Конструктор ЛинейнаяВеличина
    constructor(сторона1: ЛинейнаяВеличина, сторона2: ЛинейнаяВеличина, сторона3: ЛинейнаяВеличина);
    // Реальная реализация
    constructor(
      сторона1: number | ЛинейнаяВеличина,
      сторона2: number | ЛинейнаяВеличина,
      сторона3: number | ЛинейнаяВеличина,
      unit: ЛинейнаяЕдиница = "м"
    ) {
      // Подготовка величин если на конструктор переданы number-ы
      const [s1, s2, s3] = ЛинейнаяВеличина.привестиКВеличинам([сторона1, сторона2, сторона3], unit);
  
      // Проверка единиц и выбор основной
      const основнаяЕдиница = ЛинейнаяВеличина.проверитьОднотипностьЕдиниц(s1, s2, s3);
  
      // Установка центра фигуры и основнойЕдиницы на суперконструкторе
      super(new Точка(0, 0), основнаяЕдиница);
  
      // Проверка существования
      Треугольник.проверитьСуществование(s1, s2, s3);
  
      // Присваиваем свойства
      this.стороны = [s1, s2, s3];
    }
  
    public static проверитьСпецифичныеУсловия(a: ЛинейнаяВеличина, b: ЛинейнаяВеличина, c: ЛинейнаяВеличина): void {
      if (a.val + b.val <= c.val || a.val + c.val <= b.val || b.val + c.val <= a.val) {
        throw new Error("Такой треугольник не существует");
      }
    }
  
    // Остальные методы без изменений
    конвертироватьВЕдиницы(unit: ЛинейнаяЕдиница): Треугольник {
      return new Треугольник(
        this.стороны[0].вЕдиницах(unit),
        this.стороны[1].вЕдиницах(unit),
        this.стороны[2].вЕдиницах(unit),
      );
    }
  
    площадь(): КвадратнаяВеличина {
      const [a, b, c] = this.стороны.map(s => s.val);
      const p = (a + b + c) / 2;
      return new КвадратнаяВеличина(
        Math.sqrt(p * (p - a) * (p - b) * (p - c)),
        КвадратнаяВеличина.изЛинейнойЕдиницы(this.основнаяЕдиница)
      );
    }
    
    периметр(): ЛинейнаяВеличина {
      return new ЛинейнаяВеличина(
        this.стороны.reduce((sum, side) => sum + side.val, 0),
        this.основнаяЕдиница
      );
    }
  }
  