import { Фигура } from "./фигура"
import {Точка} from "../абстракции/точка"
import {ЛинейнаяВеличина, ЛинейнаяЕдиница, КвадратнаяВеличина} from "../абстракции/единицыИзмерения"

export class Ромб extends Фигура {
    public side: ЛинейнаяВеличина; // сторона
    public height: ЛинейнаяВеличина; // высота
  
    // Конструктор для чисел и единиц измерения
    constructor(side: number, height: number, unit?: ЛинейнаяЕдиница);
    // Конструктор для готовых линейных величин  
    constructor(side: ЛинейнаяВеличина, height: ЛинейнаяВеличина);
    // Реализация конструктора
    constructor(
      sid: number | ЛинейнаяВеличина,
      hei: number | ЛинейнаяВеличина,
      unit: ЛинейнаяЕдиница = "м"
    ) {
      // Подготовка величин если на конструктор переданы number-ы
      const [side, height] = ЛинейнаяВеличина.привестиКВеличинам([sid, hei], unit);
  
      // Проверка единиц и выбор основной
      const основнаяЕдиница = ЛинейнаяВеличина.проверитьОднотипностьЕдиниц(side, height);
  
      // Установка центра фигуры и основнойЕдиницы на суперконструкторе
      super(new Точка(0, 0), основнаяЕдиница);
  
      // Проверка существования
      Ромб.проверитьСуществование(side, height);
  
      // Присваиваем свойства
      this.side = side;
      this.height = height;
    }
  
    public static проверитьСпецифичныеУсловия(side: ЛинейнаяВеличина, height: ЛинейнаяВеличина): void {
      if (height.val >= side.val * 2) {
        throw new Error("Высота ромба не может быть больше или равна удвоенной стороне");
      }
    }
  
    конвертироватьВЕдиницы(unit: ЛинейнаяЕдиница): Ромб {
      return new Ромб(
        this.side.вЕдиницах(unit),
        this.height.вЕдиницах(unit)
      );
    }
  
    площадь(): КвадратнаяВеличина {
      const площадьЗначение = this.side.val * this.height.val;
  
      return new КвадратнаяВеличина(
        площадьЗначение,
        КвадратнаяВеличина.изЛинейнойЕдиницы(this.основнаяЕдиница)
      );
    }
  
    периметр(): ЛинейнаяВеличина {
      return new ЛинейнаяВеличина(
        4 * this.side.val,
        this.основнаяЕдиница
      );
    }
  }